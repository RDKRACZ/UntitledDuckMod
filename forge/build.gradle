plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "untitledduckmod.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modImplementation "software.bernie.geckolib:geckolib-forge-1.18:${rootProject.geckolib_version_forge}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier 'forge'
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge $rootProject.minecraft_version] v$project.version"
        changelog = new File("${rootProject.rootDir.toPath().toString()}/docs/LATEST_CHANGES.md").getText('UTF-8')
        releaseType = "beta" // Optional, use "release", "beta" or "alpha"
        gameVersions = ["${rootProject.minecraft_version}"]
        gameLoaders = ["forge"]

        mainPublication remapJar

        relations {
            depends {
                curseforge = "geckolib"
            }
        }

        if  (System.getenv("CF_TOKEN") != null) {
            curseforge {
                token = System.getenv("CF_TOKEN")
                id = "451789" // Required, must be a string, ID of CurseForge project
            }
        }

        if  (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "ojFjz7JF"
                version = "$project.version-$project.name-${rootProject.minecraft_version}"
            }
        }
    }
}